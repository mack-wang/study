@import "index2";

$red: blue; // 用$声明变量，变量有作用域，
.box1 {
  color: $red;
  border: 1px solid $red;
}

#main {
  $width: 5em !global;// 虽然$width变量在#main的作用域下，但因为声明了!global，则作用域变为全局
  width: $width;
}

#sidebar {
  width: $width;
}

$link-color: blue; //变量名用中划线

#container { // 可嵌套
  .box2 {
    color: yellow;
  }
}

// 父选择器 标识符 &
article a { // 注意，如果是伪类，则要添加&标识符！
  color: blue;
  &:hover {
    color: red
  }
}

// 父选择器其实就是父选择器的字符串变量
#main {
  color: black;
  &-sidebar { border: 1px solid; }
}

#main {
  color: black; }
#main-sidebar {
  border: 1px solid; }

// 群组嵌套
.container {
  h1, h2, h3 {
    margin-bottom: .8em
  }
}

// 选择器
article section {
  margin: 5px
}

// 后代
article > section {
  border: 1px solid #ccc
}

// 子选择器
header + p {
  font-size: 1.1em
}

// 相邻选择器
article ~ article {
  border-top: 1px dashed #ccc
}

//不相邻的同代选择器

// 嵌套属性
/*
我们平常写border-color,margin-left时，可以用下面的方式来进行书写
*/
nav {
  border: {
    style: solid;
    width: 1px;
    color: #ccc;
  }
  margin: {
    left: 10px;
    top: 20px;
  }
}

$green: green !default; // 如果引入文件中已经有green则会覆盖此变量，若没有，则使用此变量
.box3 {
  color: $green;
}

// 原生css是不可以嵌套@import的，但在sass中可以
.blue-theme {
  @import "index2";
}

//混合器
// 变量只能设置一个值，而要重复使用大段的变量，则要使用@mixin @include
@mixin rounded-corners {
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
}

.notice {
  background-color: green;
  border: 2px solid #00aa00;
  @include rounded-corners;
}

// 可以传参，参数就是sass的变量
// 也可以不传参，直接使用变量作为默认值
@mixin link-colors($normal, $hover, $visited) {
  color: $normal;
  &:hover { color: $hover; }
  &:visited { color: $visited; }
}

// 继承
.error {
  border: 1px solid red;
  background-color: #fdd;
}

.error.success {
  color:red;
}

.seriousError {
  @extend .error;
  border-width: 3px;
}
// 使用了@extend不仅仅是继承，可以理解成，凡是用到了seriousError的地方都等于用到了seriousError和error这两个
/*
.error, .seriousError {
  border: 1px solid red;
  background-color: #fdd; }

.error.success, .success.seriousError {
  color: red; }
*/


/*
关于@extend有两个要点你应该知道。

跟混合器相比，继承生成的css代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的css体积更小。如果你非常关心你站点的速度，请牢记这一点。
继承遵从css层叠的规则。当两个不同的css规则应用到同一个html元素上时，并且这两个不同的css规则对同一属性的修饰存在不同的值，css层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。
*/

// 可进行加减乘除，并可以自动转换单位
.cul{
  font-size: 16px + 22px;
}

// 在有引用的值中，用#{}解析变量或运算
p:before {
  content: "I ate #{5 + 10} pies!";
}

//插值语句 直接使用#{$name}可以解析出无引用的字符串
$name: foo;
$attr: border;
p.#{$name} {
  #{$attr}-color: blue;
}

// @import可以引用本地、远程、局部、个别变量
@import "foo.css";
@import "foo" screen;
@import "http://foo.com/bar";
@import url(foo);

// 引用scss文件，但不解析
// 凡是以_NAME.scss下划线开头的scss文件都 不会被sass解析成scss文件，这样，这些文件可以作为配置文件

// 可以使用判断
//@if
p {
  @if $type == ocean {
    color: blue;
  } @else if $type == matador {
    color: red;
  } @else if $type == monster {
    color: green;
  } @else {
    color: black;
  }
}

// 可以使用循环
// @for
@for $i from 1 through 3 {
  .item-#{$i} { width: 2em * $i; }
}

// 可以使用遍历 @each

// 可以使用函数 @function
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
  @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar { width: grid-width(5); }

//理解，基本上的编程语言必备的一些特性都在sass中得到实现